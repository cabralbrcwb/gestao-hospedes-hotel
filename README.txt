### ‚úÖ Checklist Final do Projeto: belavista-backend

Este documento serve como um checklist de todos os arquivos e classes criados e modificados durante o desenvolvimento do backend.

---

### üèóÔ∏è Arquivos de Configura√ß√£o e Build

- [X] `pom.xml`: Gerenciador de depend√™ncias do Maven, configurado com Spring Boot, Spring Data JPA, Web, Validation, PostgreSQL, Lombok e Springdoc.
- [X] `application.properties`: Configura√ß√µes da aplica√ß√£o, incluindo conex√£o com o banco de dados, estrat√©gia de DDL (`create-drop`), e o `MessageSource`.
- [X] `messages.properties`: Arquivo central para todas as mensagens de erro e valida√ß√£o (i18n).

---

### ‚òï C√≥digo Fonte Principal (`src/main/java`)

#### üì¶ Pacote Principal (`br.com.senior.gestaohospedes.belavista`)
- [X] `BelavistaApplication.java`: Classe principal que inicia a aplica√ß√£o Spring Boot e configura o bean do `Clock`.

#### üì¶ Pacote `config`
- [X] `WebConfig.java`: Configura√ß√£o do CORS para permitir a comunica√ß√£o com o frontend Angular.

#### üì¶ Pacote `controller`
- [X] `HospedeController.java`: Endpoints REST para o CRUD de H√≥spedes.
- [X] `ReservaController.java`: Endpoints REST para o fluxo de Reservas (criar, check-in, check-out, buscar).

#### üì¶ Pacote `dto` (Data Transfer Objects)
- [X] `ReservaRequestDTO.java`: DTO para receber os dados de cria√ß√£o de uma nova reserva.
- [X] `CheckoutResponseDTO.java`: DTO para estruturar a resposta detalhada do check-out.
- [X] `DetalheCustoDTO.java`: DTO para detalhar cada item de custo na fatura do check-out.
- [X] `ErrorResponseDTO.java`: DTO para padronizar as respostas de erro da API.

#### üì¶ Pacote `entity`
- [X] `Hospede.java`: Entidade que representa o h√≥spede, com relacionamento `@OneToMany` para reservas.
- [X] `Reserva.java`: Entidade que representa a reserva, com relacionamento `@ManyToOne` para h√≥spede.
- [X] `StatusReserva.java`: Enum que define os status poss√≠veis de uma reserva (`PENDENTE`, `CHECK_IN`, `CHECK_OUT`).

#### üì¶ Pacote `exception`
- [X] `BusinessException.java`: Classe base abstrata para todas as exce√ß√µes de neg√≥cio.
- [X] `GlobalExceptionHandler.java`: Handler central que captura todas as exce√ß√µes e formata as respostas de erro usando o `MessageSource`.
- [X] `HospedeNaoEncontradoException.java`: Exce√ß√£o para quando um h√≥spede n√£o √© encontrado.
- [X] `DocumentoDuplicadoException.java`: Exce√ß√£o para tentativas de cadastrar um h√≥spede com documento j√° existente.
- [X] `HospedeComReservaAtivaException.java`: Exce√ß√£o para impedir a exclus√£o de h√≥spedes com reservas ativas.
- [X] `ReservaNaoEncontradaException.java`: Exce√ß√£o para quando uma reserva n√£o √© encontrada.
- [X] `DataInvalidaException.java`: Exce√ß√£o para quando a data de sa√≠da √© anterior √† de entrada.
- [X] `ReservaSobrepostaException.java`: Exce√ß√£o para impedir reservas com datas sobrepostas para o mesmo h√≥spede.
- [X] `ReservaStatusException.java`: Exce√ß√£o para transi√ß√µes de status inv√°lidas (ex: check-out sem check-in).
- [X] `CheckInForaDoHorarioException.java`: Exce√ß√£o para tentativas de check-in antes do hor√°rio permitido.

#### üì¶ Pacote `repository`
- [X] `HospedeRepository.java`: Interface Spring Data JPA para opera√ß√µes de banco de dados da entidade `Hospede`.
- [X] `ReservaRepository.java`: Interface Spring Data JPA para opera√ß√µes de banco de dados da entidade `Reserva`.

#### üì¶ Pacote `service` e `service.impl`
- [X] `HospedeService.java`: Interface que define o contrato para os servi√ßos de h√≥spede.
- [X] `HospedeServiceImpl.java`: Implementa√ß√£o da l√≥gica de neg√≥cio para o CRUD de h√≥spedes, incluindo a valida√ß√£o de exclus√£o.
- [X] `ReservaService.java`: Interface que define o contrato para os servi√ßos de reserva.
- [X] `ReservaServiceImpl.java`: Implementa√ß√£o da l√≥gica de neg√≥cio para o fluxo de reservas, incluindo valida√ß√µes e o c√°lculo de custos.

---

### üß™ C√≥digo de Teste (`src/test/java`)

- [X] `HospedeServiceImplTest.java`: Testes unit√°rios para os principais cen√°rios do servi√ßo de h√≥spedes.
- [X] `ReservaServiceImplTest.java`: Testes unit√°rios para os principais cen√°rios do servi√ßo de reservas, incluindo as valida√ß√µes de datas e os c√°lculos de custo.

---

### üìÑ Documenta√ß√£o

- [X] `README.md`: Documento principal do projeto, com vis√£o geral, tecnologias, funcionalidades e guia de execu√ß√£o.
- [X] `VISAO_GERAL_ARQUITETURA.md`: Documento detalhado da arquitetura, endpoints e exemplos de uso da API.
